import unittest
from subnet_calculator import convert_cidr_to_subnet, convert_subnet_to_cidr, calculate_network_address, calculate_number_of_hosts, calculate_broadcast_address

class TestSubnetCalculator(unittest.TestCase):

    def test_convert_cidr_to_subnet(self):
        # tests every possible value for the subnet mask
        subnet_masks = ['0.0.0.0', '128.0.0.0', '192.0.0.0', '224.0.0.0', '240.0.0.0', '248.0.0.0', '252.0.0.0', '254.0.0.0', '255.0.0.0', '255.128.0.0', '255.192.0.0', '255.224.0.0', '255.240.0.0', '255.248.0.0', '255.252.0.0', '255.254.0.0', '255.255.0.0', '255.255.128.0', '255.255.192.0', '255.255.224.0', '255.255.240.0', '255.255.248.0', '255.255.252.0', '255.255.254.0', '255.255.255.0', '255.255.255.128', '255.255.255.192', '255.255.255.224', '255.255.255.240', '255.255.255.248', '255.255.255.252', '255.255.255.254', '255.255.255.255']
        for i in range(33):
            self.assertEqual(convert_cidr_to_subnet(i), subnet_masks[i])

    def test_convert_subnet_to_cidr(self):
        # tests every possible value for the CIDR notation
        subnet_masks = ['0.0.0.0', '128.0.0.0', '192.0.0.0', '224.0.0.0', '240.0.0.0', '248.0.0.0', '252.0.0.0', '254.0.0.0', '255.0.0.0', '255.128.0.0', '255.192.0.0', '255.224.0.0', '255.240.0.0', '255.248.0.0', '255.252.0.0', '255.254.0.0', '255.255.0.0', '255.255.128.0', '255.255.192.0', '255.255.224.0', '255.255.240.0', '255.255.248.0', '255.255.252.0', '255.255.254.0', '255.255.255.0', '255.255.255.128', '255.255.255.192', '255.255.255.224', '255.255.255.240', '255.255.255.248', '255.255.255.252', '255.255.255.254', '255.255.255.255']
        for i in range(33):
            self.assertEqual(convert_subnet_to_cidr(subnet_masks[i]), i)
        
    def test_calculate_network_address(self):
        subnet_masks = ['0.0.0.0', '128.0.0.0', '192.0.0.0', '224.0.0.0', '240.0.0.0', '248.0.0.0', '252.0.0.0', '254.0.0.0', '255.0.0.0', '255.128.0.0', '255.192.0.0', '255.224.0.0', '255.240.0.0', '255.248.0.0', '255.252.0.0', '255.254.0.0', '255.255.0.0', '255.255.128.0', '255.255.192.0', '255.255.224.0', '255.255.240.0', '255.255.248.0', '255.255.252.0', '255.255.254.0', '255.255.255.0', '255.255.255.128', '255.255.255.192', '255.255.255.224', '255.255.255.240', '255.255.255.248', '255.255.255.252', '255.255.255.254', '255.255.255.255']
        network_addresses = ['0.0.0.0', '128.0.0.0', '192.0.0.0', '192.0.0.0', '192.0.0.0', '192.0.0.0', '192.0.0.0', '192.0.0.0', '192.0.0.0', '192.128.0.0', '192.128.0.0', '192.160.0.0', '192.160.0.0', '192.168.0.0', '192.168.0.0', '192.168.0.0', '192.168.0.0', '192.168.0.0', '192.168.0.0', '192.168.0.0', '192.168.0.0', '192.168.8.0', '192.168.12.0', '192.168.14.0', '192.168.15.0', '192.168.15.0', '192.168.15.0', '192.168.15.0', '192.168.15.16', '192.168.15.16', '192.168.15.20', '192.168.15.20', '192.168.15.20']
        for i in range(33):
            print(i)
            self.assertEqual(calculate_network_address('192.168.15.20', subnet_masks[i]), network_addresses[i])

    def test_calculate_broadcast_address(self):
        pass

if __name__ == '__main__':
    unittest.main()